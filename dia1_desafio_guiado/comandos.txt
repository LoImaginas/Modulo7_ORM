Verificacion de Postgres(TERMINAL ZSH)

creacion y activacion de entorno virtual

1-	python3 -m venv vDesafioguiado
2-	source vDesafioguiado/bin/activate

ver las dependencias e instalaras las necesarias

3- pip3 install Django  (5.0.6)

instalar driver base de datos en nuestro entorno virtual
4- pip3 install psycopg2     #postgres

5- pip3 install --upgrade pip 

6- Pip3 freeze > requirementsâ€“ vDesafioguiado.txt

creacion de Proyecto

7-	Django-admin startproject desafiodb
8-	cd desafiodb

BASE DE DATO: (TERMINAL BASH)

psql -U postgres =  /Library/PostgreSQL/16/scripts/runpsql.sh 
password: Admin1234

CREAR BASE DE DATO

CREATE DATABASE "adl-test";  (NO FUNCIONO SIN COMILLAS)

\l    lista bases de datos creadas 
\c adl-test     conectarse a la base de datos 
\q   salir de la base de datos


CREAR TABLA

CREATE TABLE adltest (
    campo1 CHAR(100),
    valor1 INTEGER
);

\d adltest


"""
Vincular en "settings.py"

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'adl-test',
        'USER': 'postgres',
        'PASSWORD': 'Admin1234',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}
"""

NUEVAMENTE EN TERMINAL ZSH

agregar app al proyecto

3- python3 manage.py startapp testdb

vincular app al proyecto (setting.py) con el nombre de la app

4-
    INSTALLED_APPS = [
    ...
    'testdb',
    ...
]

"""luego de agregar el modelo en models.py"""
class AdlTest(models.Model):
    campo1 = models.CharField(max_length=100) 
    valor1 = models.IntegerField()

    def __str__(self):  #sobre escritura
        return f"{self.campo1} - {self.valor1}" 


"""5- agregar al admin.py 
from .models import Pelicula
admin.site.register(Pelicula)"""


	
6-	python3 manage.py makemigrations
7-	python3 manage.py migrate

 VOLVER A TERMINAL DE BASE DE DATO BASH 

 revisar en base de datos (terminal bash)
 \d     verificar el modelo creado en la lista
 \d 


ctrl + c (detener ejecucion)

salir de base de datos
\q 
