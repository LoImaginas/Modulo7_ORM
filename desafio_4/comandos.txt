Verificacion de Postgres(TERMINAL ZSH)

creacion y activacion de entorno virtual

1-	python3 -m venv vRegistro_cursos
2-	source vRegistro_cursos/bin/activate

ver las dependencias e instalaras las necesarias

3- pip3 install Django  (5.0.6)

instalar driver base de datos en nuestro entorno virtual para usar postgres
4- pip3 install psycopg2     #postgres

5- pip3 install --upgrade pip 


creacion de Proyecto

7-	Django-admin startproject Registro_cursos
8-	cd Registro_cursos

agregar app al proyecto

3- python3 manage.py startapp Registros_app

vincular app al proyecto (setting.py) con el nombre de la app

4-
    INSTALLED_APPS = [
    ...
    'Registros_app',
    ...
]


BASE DE DATO: (TERMINAL BASH)

psql -U postgres =  /Library/PostgreSQL/16/scripts/runpsql.sh 
password: Admin1234

CREAR BASE DE DATO

CREATE DATABASE "registro_de_cursos";  

CREAR TABLA
CREATE TABLE adltest (
    campo1 CHAR(100),
    valor1 INTEGER
);

\d adltest

\l    lista bases de datos creadas 
\c registro_de_cursos     conectarse a la base de datos 
\q   salir de la base de datos


CONFIGURAR BASE DE datos
settings.py

(cuando es postgres)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'registro_de_cursos',
        'USER': 'postgres',
        'PASSWORD': 'Admin1234',
        'HOST': 'localhost',
        'PORT': '5432',  # o dejar vacío para SQLite
    }
}

(cuando es sqlite)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR /'nombre_proyecto.sqlite3',
    }
}




TEMPLATES


DEFINIR MODELOS 
models.py


from django.db import models

class Direccion(models.Model):
    calle = models.CharField(max_length=50)
    numero = models.CharField(max_length=10)
    dpto = models.CharField(max_length=10, blank=True, null=True)
    comuna = models.CharField(max_length=50)
    ciudad = models.CharField(max_length=50)
    region = models.CharField(max_length=50)
    
    def _str_(self):
        return f"{self.calle} {self.numero}, {self.comuna}, {self.ciudad}, {self.region}"

class Profesor(models.Model):
    rut = models.CharField(max_length=9, primary_key=True)
    nombre = models.CharField(max_length=50)
    apellido = models.CharField(max_length=50)
    activo = models.BooleanField(default=False)
    creacion_registro = models.DateField(auto_now_add=True)
    modificacion_registro = models.DateField(auto_now=True)
    creado_por = models.CharField(max_length=50)

    def _str_(self):
        return f"{self.nombre} {self.apellido}"

class Estudiante(models.Model):
    rut = models.CharField(max_length=9, primary_key=True)
    nombre = models.CharField(max_length=50)
    apellido = models.CharField(max_length=50)
    fecha_nac = models.DateField()
    activo = models.BooleanField(default=False)
    creacion_registro = models.DateField(auto_now_add=True)
    modificacion_registro = models.DateField(auto_now=True)
    creado_por = models.CharField(max_length=50)
    direccion = models.OneToOneField(Direccion, on_delete=models.CASCADE)

    def _str_(self):
        return f"{self.nombre} {self.apellido}"

class Curso(models.Model):
    codigo = models.CharField(max_length=10, primary_key=True, unique=True)
    nombre = models.CharField(max_length=50)
    version = models.IntegerField()
    profesor = models.OneToOneField(Profesor, on_delete=models.CASCADE)

    def _str_(self):
        return self.nombre

class CursoEstudiante(models.Model):
    curso = models.ForeignKey(Curso, on_delete=models.CASCADE, related_name='estudiantes')
    estudiante = models.ForeignKey(Estudiante, on_delete=models.CASCADE, related_name='cursos')

    class Meta:
        unique_together = ('curso', 'estudiante')



ADMIN 
agregar al admin.py  (crear superusuario opcional)

from django.contrib import admin
from .models import Direccion, Profesor, Estudiante, Curso

# Registrar los modelos en el admin
admin.site.register(Direccion)
admin.site.register(Profesor)
admin.site.register(Estudiante)
admin.site.register(Curso)


CREACION DE SERVICES.PY 
from django.db import transaction
from .models import Estudiante, Curso, Profesor, Direccion, CursoEstudiante

def crear_estudiante(rut, nombre, apellido, fecha_nac, creado_por, direccion_data):
    with transaction.atomic():
        # Crear la dirección
        direccion = Direccion.objects.create(**direccion_data)
        
        # Crear el estudiante
        estudiante = Estudiante.objects.create(
            rut=rut,
            nombre=nombre,
            apellido=apellido,
            fecha_nac=fecha_nac,
            creado_por=creado_por,
            direccion=direccion
        )
        return estudiante

def actualizar_estudiante(rut, **kwargs):
    estudiante = Estudiante.objects.get(rut=rut)
    for key, value in kwargs.items():
        setattr(estudiante, key, value)
    estudiante.save()
    return estudiante

def obtener_estudiante(rut):
    return Estudiante.objects.get(rut=rut)

def eliminar_estudiante(rut):
    estudiante = Estudiante.objects.get(rut=rut)
    estudiante.delete()

def crear_curso(codigo, nombre, version, profesor):
    curso = Curso.objects.create(
        codigo=codigo,
        nombre=nombre,
        version=version,
        profesor=profesor
    )
    return curso

def actualizar_curso(codigo, **kwargs):
    curso = Curso.objects.get(codigo=codigo)
    for key, value in kwargs.items():
        setattr(curso, key, value)
    curso.save()
    return curso

def obtener_curso(codigo):
    return Curso.objects.get(codigo=codigo)

def eliminar_curso(codigo):
    curso = Curso.objects.get(codigo=codigo)
    curso.delete()

def crear_profesor(rut, nombre, apellido, creado_por):
    profesor = Profesor.objects.create(
        rut=rut,
        nombre=nombre,
        apellido=apellido,
        creado_por=creado_por
    )
    return profesor

def actualizar_profesor(rut, **kwargs):
    profesor = Profesor.objects.get(rut=rut)
    for key, value in kwargs.items():
        setattr(profesor, key, value)
    profesor.save()
    return profesor

def obtener_profesor(rut):
    return Profesor.objects.get(rut=rut)

def eliminar_profesor(rut):
    profesor = Profesor.objects.get(rut=rut)
    profesor.delete()

def agregar_estudiante_a_curso(codigo_curso, rut_estudiante):
    curso = Curso.objects.get(codigo=codigo_curso)
    estudiante = Estudiante.objects.get(rut=rut_estudiante)
    CursoEstudiante.objects.create(curso=curso, estudiante=estudiante)

def obtener_estudiantes_por_curso(codigo_curso):
    curso = Curso.objects.get(codigo=codigo_curso)
    return curso.cursoestudiante


CREAR LAS MIGRACIONES
	
6-	python3 manage.py makemigrations
7-	python3 manage.py migrate


python manage.py shell

(InteractiveConsole)
>>> 

from Registros_app.services import crear_curso, crear_profesor, crear_estudiante, crear_direccion, obtener_estudiante, obtener_profesor, obtener_curso, agrega_profesor_a_curso, agregar_cursos_a_estudiante, imprime_estudiante_cursos



# Crear una dirección
calle = "123 Main St"
numero = "20"
dpto = "2A"
comuna = "Las Condes"
ciudad = "Santiago"
region = "Región Metropolitana"
direccion = crear_direccion(calle, numero, dpto=dpto, comuna=comuna, ciudad=ciudad, region=region)

# Crear un profesor
profesor = crear_profesor("123456789", "Juan", "Pérez", "Administrador")

# Crear un estudiante 
direccion_data = {
    'calle': '123 Jose tomas',
    'numero': '20',
    'comuna': 'Las Condes',
    'ciudad': 'Santiago',
    'region': 'Región Metropolitana',
}


rut = "987654321"
nombre = "María"
apellido = "López"
fecha_nac = "2000-01-01"
creado_por = "Administrador"

estudiante = crear_estudiante(rut, nombre, apellido, fecha_nac, creado_por, **direccion_data)

# Crear curso
profesor = obtener_profesor("123456789")  # Obtén un profesor existente o crea uno antes
curso = crear_curso("MAT101", "Matemáticas", 1, profesor)

# Agregar profesor al curso
curso = obtener_curso("MAT101")  # Obtén un curso existente o crea uno antes
profesor = obtener_profesor("123456789")  # Obtén un profesor existente o crea uno antes
agrega_profesor_a_curso(profesor.rut, curso.codigo)

# Agregar curso al estudiante
curso = obtener_curso("MAT101")  # Obtén un curso existente o crea uno antes
estudiante = obtener_estudiante("987654321")  # Obtén un estudiante existente o crea uno antes
agregar_cursos_a_estudiante(estudiante.rut, curso.codigo)

#Obtener los Cursos de un Estudiante ----- >  me da error  

rut_estudiante = "987654321"
try:
    resultado = imprime_estudiante_cursos(rut_estudiante)
    print(resultado)
except Exception as e:
    print(f"Error al imprimir los cursos del estudiante: {str(e)}")

#Obtener un Estudiante por Rut
estudiante = obtener_estudiante("987654321")  # Obtén un estudiante existente

#Obtener un Profesor por Rut
profesor = obtener_profesor("123456789")  # Obtén un profesor existente



estudiantes = Estudiante.objects.all()
for estudiante in estudiantes:
    print(f"RUT: {estudiante.rut}, Nombre: {estudiante.nombre}, Apellido: {estudiante.apellido}")

 profesores = Profesor.objects.all()
for profesor in profesores:
    print(f"ID: {profesor.pk}, Nombre: {profesor.nombre}, Apellido: {profesor.apellido}")




Salir de la shell 
exit()

6- Pip3 freeze > requirements–vRegistro_cursos.txt

zip -r registro_cursos-Lolett-Llanquinao.zip Registro_cursos